// <auto-generated />
using System;
using Ecommerce_CatalogueManagmentService.Entities.DO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ecommerce_CatalogueManagmentService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211211085609_Product-Category-Join")]
    partial class ProductCategoryJoin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("TblCategory");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.CategoryStatus", b =>
                {
                    b.Property<Guid>("CsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CsId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("TblCategoryStatus");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("TblProduct");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.ProductStatus", b =>
                {
                    b.Property<Guid>("PsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PsId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("TblProductStatus");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatuDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("TblStatus");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.CategoryStatus", b =>
                {
                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Category", "Category")
                        .WithOne("CategoryStatus")
                        .HasForeignKey("Ecommerce_CatalogueManagmentService.Entities.DO.CategoryStatus", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Status", "Status")
                        .WithMany("CategoryStatus")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.ProductCategory", b =>
                {
                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Category", "Category")
                        .WithMany("ProductCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Product", "Product")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.ProductStatus", b =>
                {
                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Product", "Product")
                        .WithOne("ProductStatus")
                        .HasForeignKey("Ecommerce_CatalogueManagmentService.Entities.DO.ProductStatus", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_CatalogueManagmentService.Entities.DO.Status", "Status")
                        .WithMany("ProductStatus")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Category", b =>
                {
                    b.Navigation("CategoryStatus");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Product", b =>
                {
                    b.Navigation("ProductCategory");

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("Ecommerce_CatalogueManagmentService.Entities.DO.Status", b =>
                {
                    b.Navigation("CategoryStatus");

                    b.Navigation("ProductStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
